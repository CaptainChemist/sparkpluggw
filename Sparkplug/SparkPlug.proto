syntax = "proto2";

/*
Support for the Sparkplug V2.1 + Appendix Payload B Standard

Source Material from:
https://s3.amazonaws.com/cirrus-link-com/Sparkplug+Topic+Namespace+and+State+ManagementV2.1+Apendix++Payload+B+format.pdf
*/

package sparkplug;

message Payload {
    /*
    // Indexes of Data Types
    // Unknown placeholder for future expansion.
    Unknown = 0;
    // Basic Types
    Int8 = 1;
    Int16 = 2;
    Int32 = 3;
    Int64 = 4;
    UInt8 = 5;
    UInt16 = 6;
    UInt32 = 7;
    UInt64 = 8;
    Float = 9;
    Double = 10;
    Boolean = 11;
    String = 12;
    DateTime = 13;
    Text = 14;
    // Additional Metric Types
    UUID = 15;
    DataSet = 16;
    Bytes = 17;
    File = 18;
    Template = 19;

    // Additional PropertyValue Types
    PropertySet = 20;
    PropertySetList = 21;
    */

    message Template {

        message Parameter {
            optional string name = 1;
            optional uint32 type = 2;

                oneof value {
                    uint32 int_value = 3;
                    uint64 long_value = 4;
                    float float_value = 5;
                    double double_value = 6;
                    bool boolean_value = 7;
                    string string_value = 8;
                    ParameterValueExtension extension_value = 9;
                }

            message ParameterValueExtension {
                extensions 1 to max;
            }
        }

        optional string version = 1;
        repeated Metric metrics = 2;
        repeated Parameter parameters = 3;
        optional string template_ref = 4;
        optional bool is_definition = 5;
        extensions 6 to max;
    }

    message DataSet {
        message DataSetValue {
            oneof value {
                uint32 int_value = 1;
                uint64 long_value = 2;
                float float_value = 3;
                double double_value = 4;
                bool boolean_value = 5;
                string string_value = 6;
                DataSetValueExtension extension_value = 7;
            }

            message DataSetValueExtension {
                extensions 1 to max;
            }
        }

        message Row {
            repeated DataSetValue elements = 1;
            extensions 2 to max; // For third party extensions
        }

        optional uint64 num_of_columns = 1;
        repeated string columns = 2;
        repeated uint32 types = 3;
        repeated Row rows = 4;
        extensions 5 to max; // For third party extensions
    }

    message PropertyValue {

        optional uint32 type = 1;
        optional bool is_null = 2;

        oneof value {
            uint32 int_value = 3;
            uint64 long_value = 4;
            float float_value = 5;
            double double_value = 6;
            bool boolean_value = 7;
            string string_value = 8;
            PropertySet propertyset_value = 9;
            PropertySetList propertysets_value = 10; // List of Property Values
            PropertyValueExtension extension_value = 11;
        }

        message PropertyValueExtension {
            extensions 1 to max;
        }
    }

    message PropertySet {
        repeated string keys = 1; // Names of the properties
        repeated PropertyValue values = 2;
        extensions 3 to max;
    }

    message PropertySetList {
        repeated PropertySet propertyset = 1;
        extensions 2 to max;
    }

    message MetaData {
        optional bool is_multi_part = 1;
        optional string content_type = 2; // Content/Media type
        optional uint64 size = 3; // File size, String size, Multi-part
        optional uint64 seq = 4; // Sequence number for multi-part
        optional string file_name = 5; // File name
        optional string file_type = 6; // File type (i.e. xml, json, txt, cpp,
        optional string md5 = 7; // md5 of data
        optional string description = 8; // Could be anything such as json or
        extensions 9 to max;
    }

    message Metric {
        optional string name = 1;
        optional uint64 alias = 2;
        optional uint64 timestamp = 3;
        optional uint32 datatype = 4; // DataType of the metric/tag value
        optional bool is_historical = 5;
        optional bool is_transient = 6;
        optional bool is_null = 7;
        optional MetaData metadata = 8; // Metadata for the payload
        optional PropertySet properties = 9;

        oneof value {
            uint32 int_value = 10;
            uint64 long_value = 11;
            float float_value = 12;
            double double_value = 13;
            bool boolean_value = 14;
            string string_value = 15;
            bytes bytes_value = 16; // Bytes, File
            DataSet dataset_value = 17;
            Template template_value = 18;
            MetricValueExtension extension_value = 19;
        }

        message MetricValueExtension {
            extensions 1 to max;
        }
    }

    optional uint64 timestamp = 1; // Timestamp at message sending time
    repeated Metric metrics = 2;
    optional uint64 seq = 3; // Sequence number
    optional string uuid = 4; // UUID to track message type in terms
    optional bytes body = 5; // To optionally bypass the whole
    extensions 6 to max; // For third party extensions
}
